#!/bin/bash
#
# Z-BRAINS - Generating, normalizing, and visualizing structural imaging features


ZBRAINS=$(dirname "$(realpath "$0")")
export ZBRAINS

# Source utilities functions
source "${ZBRAINS}/config.cfg" # Configuration file
script_dir=${ZBRAINS}/functions
source "${script_dir}/utilities.sh"



version() {
  echo -e "\z-brains April 2023 (Version ${VERSION})\n"
}


#---------------- FUNCTION: HELP ----------------#
help() {
local pcolor="\033[38;5;141m" # Purple
local rcolor="\033[38;5;197m" # Red
local gcolor="\033[38;5;120m" # Green
#local bcolor="\033[0;36;10m" # Green
local nc="\033[0m" # No color


# Raw dir not needed
#\t${gcolor}-rawdir${NC} [path]          : Path to BIDS raw data folder. This is required for post-processing.
#                                  Example: '/pathToBIDSDataset/rawdata'.


echo -e "
${pcolor}COMMAND:${nc}
   $(basename "$0")


${pcolor}OPTIONS:${nc}
\t${rcolor}-sub${nc} ID                 : BIDS subject ID. Example: 'PX001' for 'sub-PX001'.
\t${rcolor}-outdir${nc} path            : Output directory for z-brains derivatives. If the directory does not exist, it
                                  will be created. Example: '/pathToBIDSDataset/derivatives/zbrains'.

\t${gcolor}-ses${nc} [name]             : Specify the actual session identifier. If omitted, the script will manage the
                                  data as a single session. Example: '001' for session 'ses-001'.
\t${gcolor}-hippdir${nc} [path]         : Path to hippunfold derivatives folder. This is required for post-processing.
                                  Example: '/pathToBIDSDataset/derivatives/hippunfold'.
\t${gcolor}-micapipedir${nc} [path]     : Path to micapipe derivatives folder. This is required for post-processing.
                                  Example: '/pathToBIDSDataset/derivatives/micapipe'.
\t${gcolor}-run${nc} [task ...]         : Indicate tasks to perform. Options:
                                    - proc        : post-processing
                                    - regional    : regional analysis
                                    - asymmetry   : feature asymmetry analysis
                                    - all         : perform all tasks (default)
\t${gcolor}-struct${nc} [structure ...] : Specify structures to use in processing and/or case-control analyses. Options:
                                    - cortex      : cortex data
                                    - subcortex   : subcortex data
                                    - hippocampus : hippocampus data
                                    - all         : all structures (default)
\t${gcolor}-feat${nc} [feature ...]     : Specify features to use in processing and/or case-control analysis. Options:
                                    - ADC         : apparent diffusion coefficient
                                    - FA          : fractional anisotropy
                                    - flair       : FLAIR
                                    - qT1         : quantitative T1
                                    - thickness   : cortical thickness (for subcortex, volume is used)
                                    - all         : all features (default)
\t${gcolor}-resolution${nc} [res ...]   : Surface resolutions to use for cortex and hippocampus. Options:
                                    - low         : 5k cortical & 2mm hippocampal surfaces
                                    - high        : 32k cortical surfaces & 0p5mm hippocampal surfaces
                                    - all         : all resolutions (default)
\t${gcolor}-smooth_ctx${nc} [size]      : Size of gaussian smoothing kernel in mm used for cortical features.
                                  Default is 5.
\t${gcolor}-smooth_hipp${nc} [size]     : Size of gaussian smoothing kernel in mm used for hippocampal features.
                                  Default is 2.
\t${gcolor}-thr_regional${nc} [th]      : Z-score threshold for regional maps. Default is 1.96.
\t${gcolor}-thr_asymmetry${nc} [th]     : Z-score threshold for asymmetry maps. Default is 1.96.
\t${gcolor}-approach${nc} [path]        : Approach to analyze the differences of patient wrt controls. Options:
                                    - zscore      : z-scoring
                                    - norm        : normative modelling
                                    - all         : all analyses (default)
\t${gcolor}-demo_cn${nc} [path]         : CSV file with demographics for controls. Required for regional/asymmetry
                                  analysis. Required columns:
                                    - ID          : subject ID. Example: 'HC010'.
                                    - SES         : session ID. Example: '02'.
                                    - Other       : other column names provided with '-covariates'. Only used for
                                                  normative modelling (i.e., approach='norm'). If approach='zscore',
                                                  only ID and SES columns are needed.
\t${gcolor}-demo_px${nc} [path]         : CSV file with patient demographics. Required for regional/asymmetry analysis.
                                  Only required when approach=norm (i.e., normative modelling). Required columns:
                                    - ID          : patient ID. Example: 'PX001'.
                                    - SES         : session ID. Example: 'pre'.
                                    - Other       : other column names provided with '-covariates'
\t${gcolor}-covariates${nc} [cov ...]   : Covariates for normative modelling. These should be columns in the CSV files
                                  provided for controls and patients. Example: '-covariates AGE SITE'
\t${gcolor}-threads${nc} [n]            : Number of threads use for workbench command and ANts (Default is 6)
\t${gcolor}-verbose${nc} [level]        :  Verbosity level (default is -1). Levels:
                                    - 0           : Only error messages
                                    - 1           : Warning messages in addition to everything in previous levels
                                    - 2           : Information messages in addition to everything in previous levels
                                    - 3           : Command logs in addition to everything in previous levels
                                    - >3 or <0    : All messages
\t${gcolor}-h|-help${nc}                : Print help
\t${gcolor}-v|-version${nc}             : Print software version



${pcolor}USAGE:${nc}
    ${pcolor}$(basename "$0")${nc} ${rcolor}-sub${nc} <BIDS_ID>
              ${rcolor}-rawdir${nc} <raw_data_directory>
              ${rcolor}-hippdir${nc} <hippunfold_directory>
              ${rcolor}-micapipedir${nc} <micapipe_directory>
              ${rcolor}-outdir${nc} <output_directory>



${pcolor}DEPENDENCIES:${nc}
    > workbench   1.4.2   (https://www.humanconnectome.org/software/workbench-command)
    > ANTs        2.3.3   (https://github.com/ANTsX/ANTs)
    > python      3.7.6   (https://www.python.org)


McGill University, MNI, MICA lab, April 2023
https://github.com/MICA-MNI/micapipe
https://github.com/MICA-MNI/z-brains
http://mica-mni.github.io/
"
}


# ----------------------------------------------------------------------------------------------- #
# -------------------------- Handle all arguments and create variables -------------------------- #
# ----------------------------------------------------------------------------------------------- #
declare -A map_resolution_ctx=([low]=$LOW_RESOLUTION_CTX [high]=$HIGH_RESOLUTION_CTX)
declare -A map_resolution_hipp=([low]=$LOW_RESOLUTION_HIPP [high]=$HIGH_RESOLUTION_HIPP)


# Defaults
export VERBOSE=-1
session="SINGLE"
smooth_ctx=${DEFAULT_SMOOTH_CTX}
smooth_hipp=${DEFAULT_SMOOTH_HIPP}
threshold_regional=${DEFAULT_THRESHOLD}
threshold_asymmetry=${DEFAULT_THRESHOLD}
tasks=(all)
structures=(all)
features=(all)
resolutions=(all)
approaches=(zscore)
covariates=()

for arg in "$@"; do
  case "$arg" in
  -h|-help)
    help
    exit 1
    ;;
  -v|-version)
    version
    exit 1
    ;;
  -sub)
    [[ $# -eq 1 || "$2" == -* ]] && SHOW_ERROR "${arg} option requires a value." && exit 1;
    id="$2"
    shift 2
    ;;
  -hippdir)
    [[ $# -eq 1 || "$2" == -* ]] && SHOW_ERROR "${arg} option requires a value." && exit 1;
    hipp_dir="$2"
    shift 2
    ;;
  -micapipedir)
    [[ $# -eq 1 || "$2" == -* ]] && SHOW_ERROR "${arg} option requires a value." && exit 1;
    micapipe_dir="$2"
    shift 2
    ;;
  -outdir)
    [[ $# -eq 1 || "$2" == -* ]] && SHOW_ERROR "${arg} option requires a value." && exit 1;
    out_dir="$2"
    shift 2
    ;;
  -ses)
    [[ $# -eq 1 || "$2" == -* ]] && SHOW_ERROR "${arg} option requires a value." && exit 1;
    session="$2"
    shift 2
    ;;
  -run)
    tasks=()
    shift
    while [[ $# -gt 0 && ! "$1" == -* ]]; do
      if [[ " ${LIST_TASKS[*]} " == *" $1 "* ]]; then
        tasks+=("$1")
      elif [ "$1" == "all" ]; then
        tasks=(all)
      else
        SHOW_ERROR "Invalid argument for ${arg}: $1"
        exit 1
      fi
      shift
    done
    ;;
  -struct)
    structures=()
    shift
    while [[ $# -gt 0 && ! "$1" == -* ]]; do
      if [[ " ${LIST_STRUCTURES[*]} " == *" $1 "* ]]; then
        structures+=("$1")
      elif [ "$1" == "all" ]; then
        structures=(all)
      else
        SHOW_ERROR "Invalid argument for ${arg}: $1"
        exit 1
      fi
      shift
    done
    ;;
  -feat)
    features=()
    shift
    while [[ $# -gt 0 && ! "$1" == -* ]]; do
      if [[ " ${LIST_FEATURES[*]} " == *" $1 "* ]]; then
        features+=("$1")
      elif [ "$1" == "all" ]; then
        features=(all)
      else
        SHOW_ERROR "Invalid argument for ${arg}: $1"
        exit 1
      fi
      shift
    done
    ;;
  -resolution)
    resolutions=()
    shift
    while [[ $# -gt 0 && ! "$1" == -* ]]; do
      if [[ " ${LIST_RESOLUTIONS[*]} " == *" $1 "* ]]; then
        resolutions+=("$1")
      elif [ "$1" == "all" ]; then
        resolutions=(all)
      else
        SHOW_ERROR "Invalid argument for ${arg}: $1"
        exit 1
      fi
      shift
    done
    ;;
  -approach)
    approaches=()
    shift
    while [[ $# -gt 0 && ! "$1" == -* ]]; do
      if [[ " ${LIST_APPROACHES[*]} " == *" $1 "* ]]; then
        approaches+=("$1")
      elif [ "$1" == "all" ]; then
        approaches=(all)
      else
        SHOW_ERROR "Invalid argument for ${arg}: $1"
        exit 1
      fi
      shift
    done
    ;;
  -covariates)
    shift
    while [[ $# -gt 0 && ! "$1" == -* ]]; do covariates+=("$1"); shift; done
    ;;
  -smooth_ctx)
    [[ $# -eq 1 || "$2" == -* ]] && SHOW_ERROR "${arg} option requires a value." && exit 1;
    smooth_ctx=$2
    shift 2
  ;;
  -smooth_hipp)
    [[ $# -eq 1 || "$2" == -* ]] && SHOW_ERROR "${arg} option requires a value." && exit 1;
    smooth_hipp=$2
    shift 2
  ;;
  -thr_regional)
    [[ $# -eq 1 || "$2" == -* ]] && SHOW_ERROR "${arg} option requires a value." && exit 1;
    threshold_regional="$2"
    shift 2
  ;;
  -thr_asymmetry)
    [[ $# -eq 1 || "$2" == -* ]] && SHOW_ERROR "${arg} option requires a value." && exit 1;
    threshold_asymmetry="$2"
    shift 2
  ;;
  -demo_cn)
    [[ $# -eq 1 || "$2" == -* ]] && SHOW_ERROR "${arg} option requires a value." && exit 1;
    demo_cn="$2"
    shift 2
  ;;
  -demo_px)
    [[ $# -eq 1 || "$2" == -* ]] && SHOW_ERROR "${arg} option requires a value." && exit 1;
    demo_px="$2"
    shift 2
  ;;
  -threads)
    [[ $# -eq 1 || "$2" == -* ]] && SHOW_ERROR "${arg} option requires a value." && exit 1;
    threads="$2"
    shift 2
  ;;
  -verbose)
    VERBOSE=$2
    export VERBOSE
    shift 2
  ;;
  -*)
    SHOW_ERROR "Unknown option ${2}"
    help
    exit 1
  ;;
    esac
done

check_option() {
  key=$1
  value=$2
  msg=$3
  [[ -z $msg ]] && msg="Mandatory argument is missing: -$key";
  [[ -z "$value" ]] && SHOW_ERROR "$msg" && exit 1;
}

# ------------------------------------------------- Check arguments ------------------------------------------------- #
check_option sub "$id"
check_option outdir "$out_dir"

# Validate options
# If no tasks specified -> raise error - This only happens when user provides -run with no values
[[ ${#tasks[*]} -eq 0 ]] && SHOW_ERROR "Option -run requires at least one task." && exit 1;
[[ " ${tasks[*]} " =~ " all " ]] && tasks=("${LIST_TASKS[@]}")

# If no structures specified -> raise error - This only happens when user provides -struct with no values
[[ ${#structures[*]} -eq 0 ]] && SHOW_ERROR "Option -struct requires at least one structure." && exit 1;
[[ " ${structures[*]} " =~ " all " ]] && structures=("${LIST_STRUCTURES[@]}")
mapfile -t structures < <(printf "%s\n" "${structures[@]}" | sort -f)  # case-insensitive sort

# If no features specified -> raise error - This only happens when user provides -feat with no values
[[ ${#features[*]} -eq 0 ]] && SHOW_ERROR "Option -feat requires at least one feature." && exit 1;
[[ " ${features[*]} " =~ " all " ]] && features=("${LIST_FEATURES[@]}")
mapfile -t features < <(printf "%s\n" "${features[@]}" | sort -f)  # case-insensitive sort
comma_separated_features=$(IFS=, ; echo "${features[*]}")

# If no resolutions specified -> raise error - This only happens when user provides -resolution with no values
[[ ${#resolutions[*]} -eq 0 ]] && SHOW_ERROR "Option -resolution requires at least one value." && exit 1;
[[ " ${resolutions[*]} " =~ " all " ]] && resolutions=("${LIST_RESOLUTIONS[@]}")

# If no approach specified -> raise error - This only happens when user provides -approach with no values
[[ ${#approaches[*]} -eq 0 ]] && SHOW_ERROR "Option -approach requires at least one value." && exit 1;
[[ " ${approaches[*]} " =~ " all " ]] && approaches=("${LIST_APPROACHES[@]}")

# Check options required for processing
if [[ " ${tasks[*]} " =~ " proc " ]]; then
  check_option micapipedir "$micapipe_dir" "Option -micapipedir is required for processing."
  if [[ " ${structures[*]} " =~ " hippocampus " ]]; then
    check_option hippdir "$hipp_dir" "Option -hippdir is required for processing."
  fi
fi

# Check options required for regional/asymmetry analysis
if [[ " ${tasks[*]} " =~ " regional " || " ${tasks[*]} " =~ " asymmetry " ]]; then
  check_option demo_cn "$demo_cn" "Option -demo_cn is required for regional/asymmetry analysis."
  if [[ " ${approaches[*]} " =~ " norm " ]]; then
    check_option demo_px "$demo_px" "Option -demo_px is required for regional/asymmetry analysis."
    [[ ${#covariates[*]} -eq 0 ]] && SHOW_ERROR "Option -covariates requires at least one value when using normative modelling." && exit 1;
  fi
fi


# ------------------------------------------------ Check dependencies ----------------------------------------------- #
# Dependencies required for processing
if [[ " ${tasks[*]} " =~ " proc " ]]; then
  ! type -P antsRegistration >/dev/null 2>&1 && echo "ANTs not found" && exit 1;
  ! type -P wb_command >/dev/null 2>&1 && echo "Workbench not found" && exit 1;
fi

# Dependencies required for analysis
if [[ " ${tasks[*]} " =~ " regional " || " ${tasks[*]} " =~ " asymmetry " ]]; then
  ! type -P python >/dev/null 2>&1 && echo "Python not found" && exit 1;
fi


# -------------------------------------------- Check files & directories -------------------------------------------- #
id=${id/sub-/} # Remove "sub-" prefix if present
session=${session/ses-/}  # Remove 'ses-' prefix if present
out_dir=$(realpath "$out_dir")

# export BIDS_ID, SUBJECT_OUTPUT_DIR
prefixed_sid="sub-${id}";
if [ "$session" == "SINGLE" ]; then prefixed_session=""; else prefixed_session="ses-${session}"; fi

if [ "$session" == "SINGLE" ]; then
  export BIDS_ID="${prefixed_sid}"
  export SUBJECT_OUTPUT_DIR=${out_dir}/${prefixed_sid}
else
  prefixed_session="ses-${session}";
  export BIDS_ID="${prefixed_sid}_${prefixed_session}"
  export SUBJECT_OUTPUT_DIR=${out_dir}/${prefixed_sid}/${prefixed_session}
fi


# Sanity checks required for processing
if [[ " ${tasks[*]} " =~ " proc " ]]; then

  # Check if subject's micapipe directory exists
  SUBJECT_MICAPIPE_DIR=$(realpath "$micapipe_dir")/${prefixed_sid}/${prefixed_session}
  if [ ! -d "${SUBJECT_MICAPIPE_DIR}" ]; then SHOW_ERROR "${BIDS_ID} micapipe directory does not exist."; exit 1; fi
  export SUBJECT_MICAPIPE_DIR

  # Check if subject's hippunfold directory exists
  if [[ " ${structures[*]} " =~ " hippocampus " ]]; then
    SUBJECT_HIPPUNFOLD_DIR=$(realpath "$hipp_dir")/hippunfold/${prefixed_sid}/${prefixed_session}
    if [ ! -d "${SUBJECT_HIPPUNFOLD_DIR}" ]; then SHOW_ERROR "${BIDS_ID} hippunfold directory does not exist."; exit 1; fi
    export SUBJECT_HIPPUNFOLD_DIR
  fi

  # Check if subject's freesurfer/fastsurfer directory exists - only needed for subcortex
  if [[ " ${structures[*]} " =~ " subcortex " ]]; then
    # Set surface directory and check if subject has a surface directory
    subject_micapipe_qc=${SUBJECT_MICAPIPE_DIR}/QC
    Nrecon=$(find "${subject_micapipe_qc}/${BIDS_ID}_module-proc_surf-"*.json 2>/dev/null | wc -l)
    if [[ "$Nrecon" -lt 1 ]]; then
      SHOW_ERROR "Subject $id doesn't have a module-proc_surf: run -proc_surf"; exit 1
    elif [[ "$Nrecon" -eq 1 ]]; then
      module_qc=$(ls "${subject_micapipe_qc}/${BIDS_ID}_module-proc_surf-"*.json 2>/dev/null)
      recon="$(echo "${module_qc/.json/}" | awk -F 'proc_surf-' '{print $2}')"
    elif [[ "$Nrecon" -gt 1 ]]; then
      SHOW_ERROR "${BIDS_ID} has been processed with freesurfer and fastsurfer. Not supported yet"
    #  if [[ "$FastSurfer" == "true" ]]; then                              # TODO: FastSurfer???
    #    Note "fastsurfer will run: $FastSurfer\n"; recon="fastsurfer";
    #  else
    #    Note "freesurfer is the default"; recon="freesurfer"
    #  fi
    fi

    # recon is 'freesurfer' or 'fastsurfer'
    SUBJECT_SURF_DIR=${out_dir}/${recon}/${BIDS_ID}
    if [ ! -d "${SUBJECT_SURF_DIR}" ]; then SHOW_ERROR "${BIDS_ID} ${recon} directory does not exist."; exit 1; fi
    export SUBJECT_SURF_DIR
  fi
fi


# ----------------------------------------------------------------------------------------------- #
# ------------------------------------- Start of processing ------------------------------------- #
# ----------------------------------------------------------------------------------------------- #
SHOW_TITLE "z-brains pipeline - (Version $VERSION) \n\t\tSubject: $id, Session: $session"

SHOW_INFO "z-brains is running with:"
if [[ " ${tasks[*]} " =~ " proc " ]]; then
  SHOW_NOTE "ANTs........" "$(antsRegistration --version | awk -F ':' 'NR==1{print $2}')"
  SHOW_NOTE "WorkBench..." "$(wb_command -version | awk 'NR==3{print $2}')"
fi
if [[ " ${tasks[*]} " =~ " regional " || " ${tasks[*]} " =~ " asymmetry " ]]; then
  SHOW_NOTE "python......" "$(python --version | awk 'NR==1{print $2}')"
fi

# Number of THREADS used by ANTs and workbench, default is 6 if not defined by -threads
if [[ -z $threads ]]; then export threads=6; fi
SHOW_INFO "z-brains will use $threads threads for multicore processing"


# ----------------------------------------------------------------------------------------------- #
# Timer & Beginning
SECONDS=0


# ----------------------------------------------------------------------------------------------- #
# Create subject output directory structure
if [ ! -d "${SUBJECT_OUTPUT_DIR}" ]; then
  SHOW_INFO "Subject ${BIDS_ID} directory doesn't exist, creating..."
fi

# Folder for logs
Do_cmd mkdir -m 770 -p "${SUBJECT_OUTPUT_DIR}/${FOLDER_LOGS}"

# Folders for processing
if [[ " ${tasks[*]} " =~ " proc " ]]; then
  Do_cmd mkdir -m 770 -p "${SUBJECT_OUTPUT_DIR}"/"${FOLDER_MAPS}"/{"${FOLDER_SCTX}","${FOLDER_CTX}","${FOLDER_HIPP}"}
fi

# Folders for regional/asymmetry analysis
if [[ " ${tasks[*]} " =~ " regional " || " ${tasks[*]} " =~ " asymmetry " ]]; then
  Do_cmd mkdir -m 770 -p "${SUBJECT_OUTPUT_DIR}"/{"${FOLDER_NORM_Z}","${FOLDER_NORM_MODEL}"}/{"${FOLDER_SCTX}","${FOLDER_CTX}","${FOLDER_HIPP}"}
fi

# Temporary folder
tmp_dir=$(mktemp -d "$SUBJECT_OUTPUT_DIR/z_brains_temp.XXXXXXXXXX")
#hidden_dir=$(dirname "$tmp_dir")/.$(basename "$tmp_dir")  # TODO: uncomment
#mv "$tmp_dir" ".$hidden_dir"
#tmp_dir=$hidden_dir

chmod g+xX -R "${SUBJECT_OUTPUT_DIR}"


# ----------------------------------------------------------------------------------------------- #
# TRAP in case the script fails

cleanup() { # This script will clean the temporary directory
  tmp_dir=$1
  rm -Rf "${tmp_dir:?}" 2>/dev/null
}

 trap 'cleanup $tmp_dir' SIGINT SIGTERM EXIT


# ----------------------------------------------------------------------------------------------- #
# Pipeline description json
#zbrains_json  # TODO is this necessary for zbrains?


# ----------------------------------------------------------------------------------------------- #
run_command() {
  info_msg=$1
  local std_output_log=$2
  shift 2
  local cmd="$*"

  SHOW_INFO "${info_msg}"
  $cmd 2>&1 | tee -a "${std_output_log}"
}


# ----------------------------------------------------------------------------------------------- #
# ---------------------------------------- Postprocessing --------------------------------------- #
# ----------------------------------------------------------------------------------------------- #
logs_dir=${SUBJECT_OUTPUT_DIR}/${FOLDER_LOGS}

if [[ ${tasks[*]} =~ "proc" ]]; then

  # Cortex
  if [[ ${structures[*]} =~ "cortex" ]]; then
    std_output_log=${logs_dir}/ctx_proc_$(date +'%d-%m-%Y').txt

    list_res=()
    for res in "${resolutions[@]}"; do list_res+=("${map_resolution_ctx[$res]}"); done
    comma_separated_resolutions=$(IFS=, ; echo "${list_res[*]}")

    cmd="${script_dir}/run_proc.sh --structure cortex --features $comma_separated_features --fwhm $smooth_ctx \
                                   --resolution $comma_separated_resolutions --tmp $tmp_dir --threads $threads \
                                   --logfile $std_output_log"
    run_command "Structural processing: Cortex" "$std_output_log" "$cmd"
  fi

  # Hippocampus
  if [[ ${structures[*]} =~ "hippocampus" ]]; then
    std_output_log=${logs_dir}/hippo_proc_$(date +'%d-%m-%Y').txt

    list_res=()
    for res in "${resolutions[@]}"; do list_res+=("${map_resolution_hipp[$res]}"); done
    comma_separated_resolutions=$(IFS=, ; echo "${list_res[*]}")

    cmd="${script_dir}/run_proc.sh --structure hippocampus --features $comma_separated_features --fwhm $smooth_hipp \
                                   --resolution $comma_separated_resolutions --tmp $tmp_dir --threads $threads \
                                   --logfile $std_output_log"
    run_command "Structural processing: Hippocampus" "$std_output_log" "$cmd"
  fi

  # Subcortex
  if [[ ${structures[*]} =~ "subcortex" ]]; then
    std_output_log=${logs_dir}/sctx_proc_$(date +'%d-%m-%Y').txt

    cmd="${script_dir}/run_proc.sh --structure subcortex --features $comma_separated_features --tmp $tmp_dir \
                                   --threads $threads --logfile $std_output_log"
    run_command "Structural processing: Subcortex" "$std_output_log" "$cmd"
  fi
fi


# ----------------------------------------------------------------------------------------------- #
# -------------------------------- Multivariate regional analysis ------------------------------- #
# ----------------------------------------------------------------------------------------------- #
if [[ ${tasks[*]} =~ "regional" ]]; then
  std_output_log=${logs_dir}/regional_$(date +'%d-%m-%Y').txt

  cmd="python ${script_dir}/run_analysis.py --subject_id $id --session $session --zbrains_dir $out_dir \
                                            --demo $demo_cn --structure ${structures[*]} --feature ${features[*]} \
                                            --smooth-ctx $smooth_ctx --smooth-hipp $smooth_hipp \
                                            --resolution ${resolutions[*]} --threshold $threshold_regional"

  run_command "Multivariate analysis: REGIONAL" "$std_output_log" "$cmd"
fi


# ----------------------------------------------------------------------------------------------- #
# ------------------------------- Multivariate asymmetry analysis ------------------------------- #
# ----------------------------------------------------------------------------------------------- #
if [[ ${tasks[*]} =~ "asymmetry" ]]; then
  std_output_log=${logs_dir}/asymmetry_$(date +'%d-%m-%Y').txt

  cmd="python ${script_dir}/run_analysis.py --subject_id $id --session $session --zbrains_dir $out_dir \
                                            --demo $demo_cn --structure ${structures[*]} --feature ${features[*]} \
                                            --smooth-ctx $smooth_ctx --smooth-hipp $smooth_hipp \
                                            --resolution ${resolutions[*]} --threshold $threshold_asymmetry --asymmetry"

  run_command "Multivariate analysis: ASYMMETRY" "$std_output_log" "$cmd"
fi


# ----------------------------------------------------------------------------------------------- #
# -------------------------------------- Total running time ------------------------------------- #
# ----------------------------------------------------------------------------------------------- #
SHOW_TITLE "GLOBAL z-brains elapsed time:\033[38;5;220m $(bc <<< "scale=2; $SECONDS/60") minutes \033[38;5;141m"
