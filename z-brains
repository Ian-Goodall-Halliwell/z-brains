#!/bin/bash
#
# Z-BRAINS - Generating, normalizing, and visualizing structural imaging features


ZBRAINS=$(dirname "$(realpath "$0")")
export ZBRAINS

# Source utilities functions
source "${ZBRAINS}/config.cfg" # Configuration file
script_dir=${ZBRAINS}/functions
source "${script_dir}/utilities.sh"



version() {
  echo -e "\z-brains April 2023 (Version ${VERSION})\n"
}

#---------------- FUNCTION: HELP ----------------#
PCOLOR="\033[38;5;141m" # Purple
RCOLOR="\033[38;5;197m" # Red
GCOLOR="\033[38;5;120m" # Green
BCOLOR="\033[0;36;10m" # Green
NC="\033[0m" # No color

help() {
echo -e "
${PCOLOR}COMMAND:${NC}
   $(basename "$0")


${PCOLOR}ARGUMENTS:${NC}
\t${RCOLOR}-sub${NC}         : BIDS_ID identification
\t${RCOLOR}-rawdir${NC}      : Path to BIDS raw data directory
\t${RCOLOR}-hippdir${NC}     : Path to hippunfold derivatives directory
\t${RCOLOR}-micapipedir${NC} : Path to micapipe derivatives directory
\t${RCOLOR}-outdir${NC}      : Output directory for processed z-brains derivatives.
\t${GCOLOR}-ses${NC}         : OPTIONAL flag that indicates the session name (if omitted will manage as SINGLE session)
\t${GCOLOR}-run${NC} [task ...]         : Indicates tasks to perform.
                                  Options:
                                    - proc        : post-processing
                                    - regional    : multivariate regional analysis
                                    - asymmetry   : multivariate feature asymmetry analysis
                                    - all         : perform all tasks (default)
\t${GCOLOR}-struct${NC} [structure ...] : Structures to use in the post-processing and case-control analyses.
                                  Options:
                                    - cortex      : cortex data
                                    - subcortex   : subcortex data
                                    - hippocampus : hippocampus data
                                    - all         : all structures (default)
\t${GCOLOR}-feat${NC} [feature ...]     : Specify which features should undergo post-processing and/or analysis.
                                  Options:
                                    - thickness   : cortical thickness (for subcortex, volume is used)
                                    - flair       : FLAIR
                                    - FA          : fractional anisotropy
                                    - ADC         : apparent diffusion coefficient
                                    - qT1         : quantitative T1
                                    - all         : all features (default)
\t${GCOLOR}-resolution${NC} [res ...]   : Indicates resolutions of cortex and hippocampus surfaces used for processing
                                  and analysis. Options:
                                    - low         : 5k cortical & 2mm hippocampal surfaces
                                    - high        : 32k cortical surfaces & 0p5mm hippocampal surfaces
                                    - all         : all resolutions (default)
\t${GCOLOR}-smooth_ctx${NC} [size]      : Size of gaussian smoothing kernel ${BCOLOR}in mm${NC} used for cortical
                                  features. Default is 5.
\t${GCOLOR}-smooth_hipp${NC} [size]     : Size of gaussian smoothing kernel ${BCOLOR}in mm${NC} used for hippocampal
                                  features Default is 2.
\t${GCOLOR}-thr_regional${NC} [th]      : Z-score threshold for regional maps. Default is 1.96.
\t${GCOLOR}-thr_asymmetry${NC} [th]     : Z-score threshold for asymmetry maps. Default is 1.96.
\t${GCOLOR}-approach${NC} [path]        : Approach to analyze the differences of patient wrt controls. Options:
                                    - zscore      : z-scoring
                                    - norm        : normative modelling
                                    - all         : all analyses (default)
\t${GCOLOR}-demo_cn${NC} [path]         : CSV file with demographics for controls. Required for regional/asymmetry
                                  analysis. Required columns:
                                    - ID          : subject ID (e.g., PX001)
                                    - SES         : session ID (e.g., 1)
                                    - Other       : names provided with '-covariates'. Only used when approach=norm.
                                                  If approach=zscore, only ID and SES are needed.
\t${GCOLOR}-demo_px${NC} [path]         : CSV file with patient demographics. Required for regional/asymmetry analysis.
                                  Only required when approach=norm (i.e., normative modelling). Required columns:
                                    - ID          : patient ID (e.g., PX001)
                                    - SES         : session ID (e.g., 1)
                                    - Other       : names provided with '-covariates'
\t${GCOLOR}-covariates${NC} [cov ...]   : Covariates used for normative modelling. Covariates should be columns in the
                                  csv files provided for controls and patients.



${PCOLOR}OPTIONS:${NC}
\t${RCOLOR}-h|-help${NC}         : Print help
\t${RCOLOR}-v|-version${NC}      : Print software version
\t${RCOLOR}-force${NC}           : WARNING this will overwrite the BIDS_ID directory
\t${RCOLOR}-verbose${NC}         : level of verbosity. Negative numbers indicate highest level (default is -1)
\t${RCOLOR}-threads${NC}         : Number of threads (Default is 6)
\t${RCOLOR}-mica${NC}            : Only for MICA local processing
\t${RCOLOR}-qsub${NC}            : Only for MICA network processing (SGE mica.q)
\t${RCOLOR}-qall${NC}            : Only for MICA network processing (SGE all.q)


${PCOLOR}USAGE:${NC}
    ${PCOLOR}$(basename "$0")${NC} ${RCOLOR}-sub${NC} <BIDS_ID>
              ${RCOLOR}-rawdir${NC} <raw_data_directory>
              ${RCOLOR}-hippdir${NC} <hippunfold_directory>
              ${RCOLOR}-micapipedir${NC} <micapipe_directory>
              ${RCOLOR}-outdir${NC} <output_directory>



${PCOLOR}DEPENDENCIES:${NC}
    > workbench   1.4.2   (https://www.humanconnectome.org/software/workbench-command)
    > ANTS        2.3.3   (https://github.com/ANTsX/ANTs)
    > python      3.7.6   (https://www.python.org)


McGill University, MNI, MICA lab, April 2023
https://github.com/MICA-MNI/micapipe
https://github.com/MICA-MNI/z-brains
http://mica-mni.github.io/
"
}


# ----------------------------------------------------------------------------------------------- #
# -------------------------- Handle all arguments and create variables -------------------------- #
# ----------------------------------------------------------------------------------------------- #
declare -A map_resolution_ctx=([low]=$LOW_RESOLUTION_CTX [high]=$HIGH_RESOLUTION_CTX)
declare -A map_resolution_hipp=([low]=$LOW_RESOLUTION_HIPP [high]=$HIGH_RESOLUTION_HIPP)


# Defaults
export VERBOSE=-1
session="SINGLE"
smooth_ctx=${DEFAULT_SMOOTH_CTX}
smooth_hipp=${DEFAULT_SMOOTH_HIPP}
threshold_regional=${DEFAULT_THRESHOLD}
threshold_asymmetry=${DEFAULT_THRESHOLD}
tasks=(all)
structures=(all)
features=(all)
resolutions=(all)
approaches=(zscore)
#demo_cn=""
#demo_px=""
covariates=()

for arg in "$@"; do
  case "$arg" in
  -h|-help)
    help
    exit 1
    ;;
  -v|-version)
    version
    exit 1
    ;;
  -sub)
    [[ $# -eq 1 || "$2" == -* ]] && Error "${arg} option requires a value." && exit 1;
    id="$2"
    shift 2
    ;;
  -rawdir)
    [[ $# -eq 1 || "$2" == -* ]] && Error "${arg} option requires a value." && exit 1;
    raw_dir="$2"
    shift 2
    ;;
  -hippdir)
    [[ $# -eq 1 || "$2" == -* ]] && Error "${arg} option requires a value." && exit 1;
    hipp_dir="$2"
    shift 2
    ;;
  -micapipedir)
    [[ $# -eq 1 || "$2" == -* ]] && Error "${arg} option requires a value." && exit 1;
    micapipe_dir="$2"
    shift 2
    ;;
  -outdir)
    [[ $# -eq 1 || "$2" == -* ]] && Error "${arg} option requires a value." && exit 1;
    out_dir="$2"
    shift 2
    ;;
  -ses)
    [[ $# -eq 1 || "$2" == -* ]] && Error "${arg} option requires a value." && exit 1;
    session="$2"
    shift 2
    ;;
  -run)
    tasks=()
    shift
    while [[ $# -gt 0 && ! "$1" == -* ]]; do
      if [[ " ${LIST_TASKS[*]} " == *" $1 "* ]]; then
        tasks+=("$1")
      elif [ "$1" == "all" ]; then
        tasks=(all)
      else
        Error "Invalid argument for ${arg}: $1"
        exit 1
      fi
      shift
    done
    ;;
  -struct)
    structures=()
    shift
    while [[ $# -gt 0 && ! "$1" == -* ]]; do
      if [[ " ${LIST_STRUCTURES[*]} " == *" $1 "* ]]; then
        structures+=("$1")
      elif [ "$1" == "all" ]; then
        structures=(all)
      else
        Error "Invalid argument for ${arg}: $1"
        exit 1
      fi
      shift
    done
    ;;
  -feat)
    features=()
    shift
    while [[ $# -gt 0 && ! "$1" == -* ]]; do
      if [[ " ${LIST_FEATURES[*]} " == *" $1 "* ]]; then
        features+=("$1")
      elif [ "$1" == "all" ]; then
        features=(all)
      else
        Error "Invalid argument for ${arg}: $1"
        exit 1
      fi
      shift
    done
    ;;
  -resolution)
    resolutions=()
    shift
    while [[ $# -gt 0 && ! "$1" == -* ]]; do
      if [[ " ${LIST_RESOLUTIONS[*]} " == *" $1 "* ]]; then
        resolutions+=("$1")
      elif [ "$1" == "all" ]; then
        resolutions=(all)
      else
        Error "Invalid argument for ${arg}: $1"
        exit 1
      fi
      shift
    done
    ;;
  -approach)
    approaches=()
    shift
    while [[ $# -gt 0 && ! "$1" == -* ]]; do
      if [[ " ${LIST_APPROACHES[*]} " == *" $1 "* ]]; then
        approaches+=("$1")
      elif [ "$1" == "all" ]; then
        approaches=(all)
      else
        Error "Invalid argument for ${arg}: $1"
        exit 1
      fi
      shift
    done
    ;;
  -covariates)
    shift
    while [[ $# -gt 0 && ! "$1" == -* ]]; do covariates+=("$1"); shift; done
    ;;
  -smooth_ctx)
    [[ $# -eq 1 || "$2" == -* ]] && Error "${arg} option requires a value." && exit 1;
    smooth_ctx=$2
    shift 2
  ;;
  -smooth_hipp)
    [[ $# -eq 1 || "$2" == -* ]] && Error "${arg} option requires a value." && exit 1;
    smooth_hipp=$2
    shift 2
  ;;
  -thr_regional)
    [[ $# -eq 1 || "$2" == -* ]] && Error "${arg} option requires a value." && exit 1;
    threshold_regional="$2"
    shift 2
  ;;
  -thr_asymmetry)
    [[ $# -eq 1 || "$2" == -* ]] && Error "${arg} option requires a value." && exit 1;
    threshold_asymmetry="$2"
    shift 2
  ;;
  -demo_cn)
    [[ $# -eq 1 || "$2" == -* ]] && Error "${arg} option requires a value." && exit 1;
    demo_cn="$2"
    shift 2
  ;;
  -demo_px)
    [[ $# -eq 1 || "$2" == -* ]] && Error "${arg} option requires a value." && exit 1;
    demo_px="$2"
    shift 2
  ;;
  -mica)
    mica=true
    shift
  ;;
  -qsub)
    micaq=true
    shift
  ;;
  -qall)
    qall=true
    shift
  ;;
  -threads)
    [[ $# -eq 1 || "$2" == -* ]] && Error "${arg} option requires a value." && exit 1;
    threads="$2"
    shift 2
  ;;
  -force)
    force=true
    shift
  ;;
  -verbose)
    VERBOSE=$2
    export VERBOSE
    shift 2
  ;;
  -*)
    Error "Unknown option ${2}"
    help
    exit 1
  ;;
    esac
done


# ------------------------------ Check arguments and send warnings ------------------------------ #
declare -A mandatory=([sub]=$id [rawdir]=$raw_dir [hippdir]=$hipp_dir [micapipedir]=$micapipe_dir [outdir]=$out_dir)
for k in "${!mandatory[@]}"; do
  if [ -z "${mandatory[${k}]}" ]; then
    Error "Mandatory argument is missing: -$k"
    exit 1
  fi
done

# If no tasks specified -> raise error - This only happens when user provides -run with no values
[[ ${#tasks[*]} -eq 0 ]] && Error "Option -run requires at least one task." && exit 1;
[[ " ${tasks[*]} " =~ " all " ]] && tasks=("${LIST_TASKS[@]}")

# If no structures specified -> raise error - This only happens when user provides -struct with no values
[[ ${#structures[*]} -eq 0 ]] && Error "Option -struct requires at least one structure." && exit 1;
[[ " ${structures[*]} " =~ " all " ]] && structures=("${LIST_STRUCTURES[@]}")
mapfile -t structures < <(printf "%s\n" "${structures[@]}" | sort -f)  # case-insensitive sort

# If no features specified -> raise error - This only happens when user provides -feat with no values
[[ ${#features[*]} -eq 0 ]] && Error "Option -feat requires at least one feature." && exit 1;
[[ " ${features[*]} " =~ " all " ]] && features=("${LIST_FEATURES[@]}")
mapfile -t features < <(printf "%s\n" "${features[@]}" | sort -f)  # case-insensitive sort
comma_separated_features=$(IFS=, ; echo "${features[*]}")

# If no resolutions specified -> raise error - This only happens when user provides -resolution with no values
[[ ${#resolutions[*]} -eq 0 ]] && Error "Option -resolution requires at least one value." && exit 1;
[[ " ${resolutions[*]} " =~ " all " ]] && resolutions=("${LIST_RESOLUTIONS[@]}")

# If no approach specified -> raise error - This only happens when user provides -approach with no values
[[ ${#approaches[*]} -eq 0 ]] && Error "Option -approach requires at least one value." && exit 1;
[[ " ${approaches[*]} " =~ " all " ]] && approaches=("${LIST_APPROACHES[@]}")

if [[ " ${tasks[*]} " =~ " regional " || " ${tasks[*]} " =~ " asymmetry " ]]; then
  [[ -z "$demo_cn" ]] && Error "Option -demo_cn is required for regional/asymmetry analysis." && exit 1;
  if [[ " ${approaches[*]} " =~ " norm " ]]; then
    [[ -z "$demo_px" ]] && Error "Option -demo_px is required for when using normative modelling." && exit 1;
    [[ ${#covariates[*]} -eq 0 ]] && Error "Option -covariates requires at least one value when using normative modelling." && exit 1;
  fi
fi


# ------------------------------ Prepare variables ------------------------------ #

# Remove "sub-" prefix from subject id if present
id=${id/sub-/}

# Number of session session in the for 01, 02, etc or SINGLE
if [ "${session}" != "SINGLE" ]; then session=$(printf "%02d" "${session/ses-/}"); fi

# Get the real path of the Inputs
raw_dir=$(realpath "$raw_dir")
micapipe_dir=$(realpath "$micapipe_dir")
hipp_dir=$(realpath "$hipp_dir")
out_dir=$(realpath "$out_dir")

# Check raw data directory
if [ ! -d "${raw_dir}" ]; then Error "Subject $id was not found in the BIDS raw data directory\n\t Check ls ${raw_dir}"; exit 1; fi

# Assign variables names
bids_variables "$id" "$raw_dir" "$hipp_dir" "$micapipe_dir" "$out_dir" "$session"


# Set surface directory and check if subject has a surface directory
Nrecon=$(find "${DIR_QC}/${BIDS_ID}_module-proc_surf-"*.json 2>/dev/null | wc -l)

if [[ "$Nrecon" -lt 1 ]]; then
  Error "Subject $id doesn't have a module-proc_surf: run -proc_surf"; exit 1
elif [[ "$Nrecon" -eq 1 ]]; then
  module_qc=$(ls "${DIR_QC}/${BIDS_ID}_module-proc_surf-"*.json 2>/dev/null)
  recon="$(echo "${module_qc/.json/}" | awk -F 'proc_surf-' '{print $2}')"
elif [[ "$Nrecon" -gt 1 ]]; then
  Error "${BIDS_ID} has been processed with freesurfer and fastsurfer. Not supported yet"
#  if [[ "$FastSurfer" == "true" ]]; then                              # TODO: FastSurfer???
#    Note "fastsurfer will run: $FastSurfer\n"; recon="fastsurfer";
#  else
#    Note "freesurfer is the default"; recon="freesurfer"
#  fi
fi

set_surface_directory "${recon}"
if [ -z "${DIR_SUBJSURF}" ]; then fs_dir="false"; else  fs_dir=$(realpath "$DIR_SUBJSURF"); fi

if [ ! -d "$fs_dir" ]; then
  Error "Subject ${id} freesurfer directory doesn't exist, run freesurfer or fastsurfer first."
  exit 1;
fi

# Check if subject's micapipe directory exists
if [ ! -d "${SUBJECT_MICAPIPE}" ]; then
  Error "Subject ${id} micapipe directory doesn't exist, run micapipe v0.2.2 first."
  exit 1;
fi


# ----------------------------------------------------------------------------------------------- #
# ------------------------------------- Start of processing ------------------------------------- #
# ----------------------------------------------------------------------------------------------- #
Title "z-brains pipeline - (Version $VERSION) \n\t\tSubject: $id, Session: $session"

# -------------------- Launch the init file for local processing at MICA lab -------------------- #
if [ "$micaq" = "true" ] || [ "$qall" = "true" ] || [ "$mica" = "true" ]; then
    source "${ZBRAINS}/functions/init.sh" "$threads"
else
    # tree display
#    if [[ -z $(which tree) ]]; then Warn "tree function was not found"; fi # TODO: tree is so far not used here
    # ANTSx
    if [[ -z $(which antsRegistration) ]]; then Error "ANTs was not found"; exit 1; fi
    # workbench
    if [[ -z $(which wb_command) ]]; then Error "Workbench was not found"; exit 1; fi
fi

# Processing default
if [[ -z $PROC ]]; then export PROC="LOCAL"; fi

# Number of THREADS used by ANTs and workbench, default is 6 if not defined by -threads
if [[ -z $threads ]]; then export threads=6; fi
Info "z-brains will use $threads threads for multicore processing"

# If -force flag specified
if [[ ${force} == true ]]; then
  Warning "$id processing directory will be overwritten"
  echo rm -rf "${out_dir:?}/${BIDS_ID:?}";
fi


# Timer & Beginning
SECONDS=0

# Create output directory if does not exist
if [ ! -d "${out_dir}" ]; then Do_cmd mkdir -p "${out_dir}"; fi

# Create subject directory in output directory if it does not exist
if [ ! -d "${SUBJECT_OUT}" ]; then
  Info "Subject ${BIDS_ID} directory doesn't exist, creating..."

  Do_cmd mkdir -m 770 -p "${SUBJECT_OUT}/${FOLDER_LOGS}"
  Do_cmd mkdir -m 770 -p "${SUBJECT_OUT}"/{"${FOLDER_MAPS}","${FOLDER_NORM_Z}","${FOLDER_NORM_MODEL}"}/{"${FOLDER_SCTX}","${FOLDER_CTX}","${FOLDER_HIPP}"}

  chmod g+xX -R "${SUBJECT_OUT}"
fi

# Temp dir - within the z-brains folder of the subject
tmp_dir=$(mktemp -d "$SUBJECT_OUT/z_brains_temp.XXXXXXXXXX")
#hidden_dir=$(dirname "$tmp_dir")/.$(basename "$tmp_dir")  # TODO: uncomment
#mv "$tmp_dir" ".$hidden_dir"
#tmp_dir=$hidden_dir

# TRAP in case the script fails
 trap 'cleanup $tmp_dir' SIGINT SIGTERM EXIT


# ----------------------------------------------------------------------------------------------- #
# Pipeline description json
zbrains_json


# ----------------------------------------------------------------------------------------------- #
run_command() {
  info_msg=$1
  job_name=$2
  local std_output_log=$3
  local std_error_log=$4
  shift 4
  local cmd="$*"

#  echo info_msg = $info_msg
#  echo job_name = $job_name
#  echo std_output_log = $std_output_log
#  echo std_error_log = $std_error_log
#  echo cmd = $cmd

  args="-l h_vmem=6G -N ${job_name} -e ${std_error_log} -o ${std_output_log} $cmd"

  if [[ $micaq == "true" ]]; then
    Info "MICA qsub - ${info_msg}"
    Warning "This option only works on the MICA workstations"
#    export PROC="qsub-MICA"
    qsub -q mica.q -pe smp $threads "$args"

  elif [[ $qall == "true" ]]; then
    Info "all.q qsub - ${info_msg}"
    Warning "This option only works on the McGill BIC network"
#      export PROC="qsub-all.q"
    qsub -q all.q -pe all.pe $threads "$args"
  else
    #  LOCAL
#     $cmd $PROC 2>&1 | tee -a "${std_output_log}"
    $cmd 2>&1 | tee -a "${std_output_log}"
  fi
}


# ----------------------------------------------------------------------------------------------- #
# ---------------------------------------- Postprocessing --------------------------------------- #
# ----------------------------------------------------------------------------------------------- #
if [[ ${tasks[*]} =~ "proc" ]]; then

  # Cortex
  if [[ ${structures[*]} =~ "cortex" ]]; then
    prefix_log=${DIR_LOGS}/ctx_proc_$(date +'%d-%m-%Y')
    std_output_log=${prefix_log}.txt
    std_error_log=${prefix_log}.e

    list_res=()
    for res in "${resolutions[@]}"; do list_res+=("${map_resolution_ctx[$res]}"); done
    comma_separated_resolutions=$(IFS=, ; echo "${list_res[*]}")

    cmd="${script_dir}/run_proc.sh --structure cortex --features $comma_separated_features --fwhm $smooth_ctx \
                                   --resolution $comma_separated_resolutions --tmp $tmp_dir --threads $threads \
                                   --logfile $std_output_log $PROC"
    run_command "Structural processing: Cortex" "q${id}_ctx_proc" "$std_output_log" "$std_error_log" "$cmd"
  fi

  # Hippocampus
  if [[ ${structures[*]} =~ "hippocampus" ]]; then
    prefix_log=${DIR_LOGS}/hippo_proc_$(date +'%d-%m-%Y')
    std_output_log=${prefix_log}.txt
    std_error_log=${prefix_log}.e

    list_res=()
    for res in "${resolutions[@]}"; do list_res+=("${map_resolution_hipp[$res]}"); done
    comma_separated_resolutions=$(IFS=, ; echo "${list_res[*]}")

    cmd="${script_dir}/run_proc.sh --structure hippocampus --features $comma_separated_features --fwhm $smooth_hipp \
                                   --resolution $comma_separated_resolutions --tmp $tmp_dir --threads $threads \
                                   --logfile $std_output_log $PROC"
    run_command "Structural processing: Hippocampus" "q${id}_hippo_proc" "$std_output_log" "$std_error_log" "$cmd"
  fi

  # Subcortex
  if [[ ${structures[*]} =~ "subcortex" ]]; then
    prefix_log=${DIR_LOGS}/sctx_proc_$(date +'%d-%m-%Y')
    std_output_log=${prefix_log}.txt
    std_error_log=${prefix_log}.e

    cmd="${script_dir}/run_proc.sh --structure subcortex --features $comma_separated_features --tmp $tmp_dir \
                                   --threads $threads --logfile $std_output_log $PROC"
    run_command "Structural processing: Subcortex" "q${id}_sctx_proc" "$std_output_log" "$std_error_log" "$cmd"
  fi
fi


# ----------------------------------------------------------------------------------------------- #
# -------------------------------- Multivariate regional analysis ------------------------------- #
# ----------------------------------------------------------------------------------------------- #
if [[ ${tasks[*]} =~ "regional" ]]; then
  prefix_log=${DIR_LOGS}/regional_$(date +'%d-%m-%Y')
  std_output_log=${prefix_log}.txt
  std_error_log=${prefix_log}.e

  cmd="python ${script_dir}/run_analysis.py --subject_id $id --session $session --zbrains_dir $out_dir \
                                            --demo $demo_cn --structure ${structures[*]} --feature ${features[*]} \
                                            --smooth-ctx $smooth_ctx --smooth-hipp $smooth_hipp \
                                            --resolution ${resolutions[*]} --threshold $threshold_regional"

  run_command "Multivariate analysis: REGIONAL" "q${id}_regionZ" "$std_output_log" "$std_error_log" "$cmd"
fi


# ----------------------------------------------------------------------------------------------- #
# ------------------------------- Multivariate asymmetry analysis ------------------------------- #
# ----------------------------------------------------------------------------------------------- #
if [[ ${tasks[*]} =~ "asymmetry" ]]; then
  prefix_log=${DIR_LOGS}/asymmetry_$(date +'%d-%m-%Y')
  std_output_log=${prefix_log}.txt
  std_error_log=${prefix_log}.e

  cmd="python ${script_dir}/run_analysis.py --subject_id $id --session $session --zbrains_dir $out_dir \
                                            --demo $demo_cn --structure ${structures[*]} --feature ${features[*]} \
                                            --smooth-ctx $smooth_ctx --smooth-hipp $smooth_hipp \
                                            --resolution ${resolutions[*]} --threshold $threshold_asymmetry --asymmetry"

  run_command "Multivariate analysis: ASYMMETRY" "q${id}_asymmetry" "$std_output_log" "$std_error_log" "$cmd"
fi


# ----------------------------------------------------------------------------------------------- #
# -------------------------------------- Total running time ------------------------------------- #
# ----------------------------------------------------------------------------------------------- #
Title "GLOBAL z-brains running time with $PROC processing:\033[38;5;220m $(bc <<< "scale=2; $SECONDS/60") minutes \033[38;5;141m"
